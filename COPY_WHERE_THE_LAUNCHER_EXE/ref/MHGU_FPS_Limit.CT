<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">b7Ej%2nldAU:MM2b.}cxWeIh0Gi32eO*Ft$Wn{Y6%{mcIVgA6t9Fkwal+AgInNpI$=7,zGoLEqjnV-i7R=ffx00</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>3530</ID>
      <Description>"&lt;- ENABLE AFTER LOADING GAME"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState Activated="1"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

GetLuaEngine().mOutput.Clear()

local rSize = 0x100000000
local rStart = 0
local rEnd = 0

for index, region in ipairs( enumMemoryRegions() ) do
  if region.RegionSize == rSize then
    rSize = region.RegionSize
    rStart = region.BaseAddress
    rEnd = region.BaseAddress + rSize
  end
end

heapaddress = rStart

if process == 'yuzu.exe' then
  heapaddress = ( heapaddress + 0x40000000 )
elseif process == 'Ryujinx.exe' then
  heapaddress = ( heapaddress - 0x40000000 )
end

unregisterSymbol('heap')
registerSymbol('heap','heapaddress')

CheatTimerInterval = 100
CheatTimer = nil
cht01 = nil
cht02 = nil
cht03 = nil
cht04 = nil
cht05 = nil

local function CheatTimer_tick( timer )
  if not getAddress('heap') and getAddress('heap') == 0 then return end

    if( readQword('fps') == nil ) then
      unregisterSymbol('player')
      registerSymbol('player', 'heap + 110B82620')

      unregisterSymbol('fps')
      registerSymbol('fps', 'heap + 10002904C')

      unregisterSymbol('monster')
      registerSymbol('monster', 'heap + 107CA5470')

      unregisterSymbol('firstitem')
      registerSymbol('firstitem', 'heap + 110D0920C')
    end

    if ( cht01 ) then
     --writeInteger( 'fps', 1114636288 )
     writeFloat( 'fps', 60 )
    end

    if ( cht02 ) then
     --writeInteger( 'fps', 1106247680 )
     writeFloat( 'fps', 30 )
    end

    if ( cht03 ) then
     writeFloat( 'fps', 90 )
    end

    if ( cht04 ) then
     writeFloat( 'fps', 120 )
    end

  return
end


CheatTimer = createTimer(MainForm)
CheatTimer.Interval = CheatTimerInterval
CheatTimer.OnTimer = CheatTimer_tick

{$asm}

[DISABLE]
{$lua}
if syntaxcheck then return end

CheatTimer.destroy()

unregisterSymbol('fps')
unregisterSymbol('player')
unregisterSymbol('monster')
unregisterSymbol('firstitem')
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4163</ID>
          <Description>"30 FPS"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

cht02 = true

{$asm}
[DISABLE]
{$lua}
if syntaxcheck then return end

cht02 = false
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4179</ID>
          <Description>"60 FPS"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

cht01 = true

{$asm}
[DISABLE]
{$lua}
if syntaxcheck then return end

cht01 = false
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4180</ID>
          <Description>"90 FPS"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

cht03 = true

{$asm}
[DISABLE]
{$lua}
if syntaxcheck then return end

cht03 = false
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>784</ID>
          <Description>"120 FPS"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

cht04 = true

{$asm}
[DISABLE]
{$lua}
if syntaxcheck then return end

cht04 = false
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Change of or ebx,00010000</Description>
      <AddressString>1FBA3F31FB2</AddressString>
      <Before>
        <Byte>E3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>CB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>DB</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>DA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of and ebx,0000FFFF</Description>
      <AddressString>1FBA3F31FAC</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>89</Byte>
        <Byte>D3</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>E3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of and ebx,0000FFFF</Description>
      <AddressString>1FBA3F2FCEA</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>89</Byte>
        <Byte>D3</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>E3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>81</Byte>
        <Byte>CB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of or ebx,00010000</Description>
      <AddressString>1FBA3F2FCF0</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>CB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>DB</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>DA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of and eax,0000FFFF</Description>
      <AddressString>1FBA3E27917</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>89</Byte>
        <Byte>C0</Byte>
        <Byte>89</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>E0</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>81</Byte>
        <Byte>C8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of or eax,00010000</Description>
      <AddressString>1FBA3E2791D</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>C8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>C0</Byte>
        <Byte>89</Byte>
        <Byte>C0</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of and ebp,0000FFFF</Description>
      <AddressString>1FBA3DDF4CF</AddressString>
      <Before>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>54</Byte>
        <Byte>89</Byte>
        <Byte>C5</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>E5</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>81</Byte>
        <Byte>CD</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of or ebp,00010000</Description>
      <AddressString>1FBA3DDF4D5</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>CD</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>ED</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>E8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of or ebx,00010000</Description>
      <AddressString>1FBA3A7625F</AddressString>
      <Before>
        <Byte>E3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>CB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>DB</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>DA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of and ebx,0000FFFF</Description>
      <AddressString>1FBA3A76259</AddressString>
      <Before>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>7C</Byte>
        <Byte>89</Byte>
        <Byte>D3</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>E3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>heap</Name>
      <Address>heapaddress</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>player</Name>
      <Address>heap + 110B82620</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fps</Name>
      <Address>heap + 10002904C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>monster</Name>
      <Address>heap + 107CA5470</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>firstitem</Name>
      <Address>heap + 110D0920C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>PROCESS_NAME = 'Yuzu.exe'
local autoAttachTimerInterval = 500
autoAttachTimer = nil

-- local function cycleFullCompact(sender,force)
    -- local state = not(compactmenuitem.Caption == 'Compact View Mode')
    -- if force~=nil then
      -- state = not force
    -- end
    -- compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
    -- getMainForm().Splitter1.Visible = state;
    -- getMainForm().Panel4.Visible    = state;
    -- getMainForm().Panel5.Visible    = state;
-- end

-- local function addCompactMenu()
    -- if compactmenualreadyexists then return end;
    -- local parent = getMainForm().Menu.Items
    -- compactmenuitem = createMenuItem(parent)
    -- parent.add(compactmenuitem)
    -- compactmenuitem.Caption = 'Compact View Mode'
    -- compactmenuitem.OnClick = cycleFullCompact
    -- compactmenualreadyexists = 'yes'
-- end

-- addCompactMenu()
-- cycleFullCompact(nil,true)

-- local function convertToHWOffset()
    -- local mr = AddressList.getSelectedRecord()
    -- if not mr then return end
    -- local curr_addr = mr.CurrentAddress
    -- if not curr_addr and curr_addr &lt;= 0 then return end
    -- local hw_offset = curr_addr - getAddress( 'heapaddress' )

    -- if hw_offset &gt; 0 then
       -- mr.address = 'heapaddress + ' .. string.format( '%X', hw_offset )
    -- end
-- end

-- local function addHWOffsetMenu()
    -- if hwoffsetmenualreadyexists then return end;
    -- local parent = getMainForm().Menu.Items
    -- hwoffsetmenuitem = createMenuItem(parent)
    -- parent.add(hwoffsetmenuitem)
    -- hwoffsetmenuitem.Caption = 'Convert to HW Offset'
    -- hwoffsetmenuitem.OnClick = convertToHWOffset
    -- hwoffsetmenualreadyexists = 'yes'
-- end

-- addHWOffsetMenu()

local function autoAttachTimer_tick( timer )
  -- Keycombo to kill timer
  if ( isKeyPressed(VK_CONTROL) and isKeyPressed(VK_SHIFT) and isKeyPressed(VK_Z) ) then
    GetLuaEngine().mOutput.Clear()
    print( 'timer destroyed' )
    timer.destroy()
    return
  end

  if readInteger(process) then
    return
  end

  PROCESS_NAME = 'yuzu.exe'
  if process == nil or readInteger(process) == nil then
    openProcess(PROCESS_NAME)
  end

  if readInteger(process) then
    return
  end

  PROCESS_NAME = 'ryujinx.exe'
  if process == nil or readInteger(process) == nil then
    openProcess(PROCESS_NAME)
  end
end



-- strings_add(getAutoAttachList(), PROCESS_NAME)

autoAttachTimer = createTimer(MainForm)
autoAttachTimer.Interval = autoAttachTimerInterval
autoAttachTimer.OnTimer = autoAttachTimer_tick


</LuaScript>
</CheatTable>
